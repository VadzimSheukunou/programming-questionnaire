{"version":3,"sources":["../../src/services/progress.service.js"],"names":["ProgressService","progressId","payload","models","Progress","findByPk","include","model","Answer","as","progress","findOne","where","id","answerId","answer","setAnswers","answers","update","isComplete","userId","findAll","progresses","generateCombinedProgress","Questionnaire","questionnaireId","Question","quest","correctAnswers","filter","isCorrect","filterQuestions","question","map","questionId","indexOf","questionnaireTitle","title","answeredQuestions","questions","Promise","all"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;IAEqBA,e;;;;;;;;;;AAEnB;;;;;;;;;;oDAOuCC,U,EAAYC,O;;;;;;;uBAC1BC,qBAAOC,QAAP,CAAgBC,QAAhB,WAA4BJ,UAA5B,GAA0C;AAC/DK,kBAAAA,OAAO,EAAE,CAAC;AACRC,oBAAAA,KAAK,EAAEJ,qBAAOK,MADN;AAERC,oBAAAA,EAAE,EAAE;AAFI,mBAAD;AADsD,iBAA1C,C;;;AAAjBC,gBAAAA,Q;;uBAMeP,qBAAOK,MAAP,CAAcG,OAAd,CAAsB;AACzCC,kBAAAA,KAAK,EAAE;AACLC,oBAAAA,EAAE,EAAEX,OAAO,CAACY;AADP;AADkC,iBAAtB,C;;;AAAfC,gBAAAA,M;AAKNL,gBAAAA,QAAQ,CAACM,UAAT,+CAAwBN,QAAQ,CAACO,OAAjC,IAA0CF,MAA1C;AAEAL,gBAAAA,QAAQ,CAACQ,MAAT,CAAgB;AACdC,kBAAAA,UAAU,EAAEjB,OAAO,CAACiB;AADN,iBAAhB;iDAIOT,Q;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;qDAKiCU,M;;;;;;;uBACNjB,qBAAOC,QAAP,CAAgBiB,OAAhB,CAAwB;AAC/CT,kBAAAA,KAAK,EAAE;AACLQ,oBAAAA,MAAM,EAAEA;AADH,mBADwC;AAI/Cd,kBAAAA,OAAO,EAAE,CAAC;AACRC,oBAAAA,KAAK,EAAEJ,qBAAOK,MADN;AAERC,oBAAAA,EAAE,EAAE;AAFI,mBAAD;AAJsC,iBAAxB,C;;;AAAnBa,gBAAAA,U;;AAUN;;;;;;AAMMC,gBAAAA,wB;;;;;+CAA2B,kBAAOb,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACXP,qBAAOqB,aAAP,CAAqBnB,QAArB,CAA8BK,QAAQ,CAACe,eAAvC,EAAwD;AAC1EnB,8BAAAA,OAAO,EAAE,CAAC;AACRC,gCAAAA,KAAK,EAAEJ,qBAAOuB,QADN;AAERjB,gCAAAA,EAAE,EAAE;AAFI,+BAAD;AADiE,6BAAxD,CADW;;AAAA;AACzBkB,4BAAAA,KADyB;AAOzBC,4BAAAA,cAPyB,GAOR,oCAAIlB,QAAQ,CAACO,OAAb,EAAsBY,MAAtB,CAA6B,UAAAd,MAAM;AAAA,qCAAIA,MAAM,CAACe,SAAX;AAAA,6BAAnC,CAPQ;;AAQzBC,4BAAAA,eARyB,GAQP,SAAlBA,eAAkB,CAAAC,QAAQ;AAAA,qCAAI,oCAAItB,QAAQ,CAACO,OAAb,EAAsBgB,GAAtB,CAA0B,UAAAlB,MAAM;AAAA,uCAAIA,MAAM,CAACmB,UAAX;AAAA,+BAAhC,EAAuDC,OAAvD,CAA+DH,QAAQ,CAACnB,EAAxE,MAAgF,CAAC,CAArF;AAAA,6BARD;;AAAA,8DAUxB;AACLZ,8BAAAA,UAAU,EAAES,QAAQ,CAACG,EADhB;AAELO,8BAAAA,MAAM,EAAEV,QAAQ,CAACU,MAFZ;AAGLgB,8BAAAA,kBAAkB,EAAET,KAAK,CAACU,KAHrB;AAILZ,8BAAAA,eAAe,EAAEf,QAAQ,CAACe,eAJrB;AAKLG,8BAAAA,cAAc,EAAEA,cALX;AAMLU,8BAAAA,iBAAiB,sCAAMX,KAAK,CAACY,SAAN,CAAgBV,MAAhB,CAAuBE,eAAvB,CAAN,CANZ;AAOLZ,8BAAAA,UAAU,EAAET,QAAQ,CAACS;AAPhB,6BAVwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mB;;kCAA3BI,wB;;;;;kDAqBCiB,OAAO,CAACC,GAAR,CAAYnB,UAAU,CAACW,GAAX,CAAe,UAAAvB,QAAQ;AAAA,yBAAIa,wBAAwB,CAACb,QAAD,CAA5B;AAAA,iBAAvB,CAAZ,C","sourcesContent":["import models from '../db-models';\r\n\r\nexport default class ProgressService {\r\n\r\n  /**\r\n   * Updates progress record: adds new answer to the user progress and set \r\n   * complete state when necessary\r\n   * \r\n   * @param {String} progressId \r\n   * @param {Object} payload \r\n   */\r\n  static async updateCurrentUserProgress(progressId, payload) {\r\n    const progress = await models.Progress.findByPk(`${progressId}`, {\r\n      include: [{\r\n        model: models.Answer,\r\n        as: 'answers'\r\n      }]\r\n    });\r\n    const answer = await models.Answer.findOne({\r\n      where: {\r\n        id: payload.answerId\r\n      }\r\n    });\r\n    progress.setAnswers([...progress.answers, answer]);\r\n\r\n    progress.update({\r\n      isComplete: payload.isComplete\r\n    });\r\n\r\n    return progress;\r\n  }\r\n\r\n  /**\r\n   * Returns combined progress: Progress, Answered Questions, Correct Answers\r\n   * \r\n   * @param {String} userId \r\n   */\r\n  static async getCombinedProgress(userId) {\r\n    const progresses = await models.Progress.findAll({\r\n      where: {\r\n        userId: userId\r\n      },\r\n      include: [{\r\n        model: models.Answer,\r\n        as: 'answers'\r\n      }]\r\n    });\r\n\r\n    /**\r\n     * Forms combined progerss for a certain user which includes data necessary for\r\n     * forming the charts statistics\r\n     * \r\n     * @param {Object} progress \r\n     */\r\n    const generateCombinedProgress = async (progress) => {\r\n      const quest = await models.Questionnaire.findByPk(progress.questionnaireId, {\r\n        include: [{\r\n          model: models.Question,\r\n          as: 'questions'\r\n        }]\r\n      });\r\n      const correctAnswers = [...progress.answers].filter(answer => answer.isCorrect);\r\n      const filterQuestions = question => [...progress.answers].map(answer => answer.questionId).indexOf(question.id) !== -1;\r\n\r\n      return {\r\n        progressId: progress.id,\r\n        userId: progress.userId,\r\n        questionnaireTitle: quest.title,\r\n        questionnaireId: progress.questionnaireId,\r\n        correctAnswers: correctAnswers,\r\n        answeredQuestions: [...quest.questions.filter(filterQuestions)],\r\n        isComplete: progress.isComplete\r\n      };\r\n    };\r\n\r\n    return Promise.all(progresses.map(progress => generateCombinedProgress(progress)));\r\n  }\r\n}\r\n"],"file":"progress.service.js"}