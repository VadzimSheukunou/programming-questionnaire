{"version":3,"sources":["../../src/controllers/question.controller.js"],"names":["QuestionController","req","res","status","json","questionId","params","models","Question","findByPk","question","send","message","questId","findAll","where","questionnaireId","include","model","Answer","as","items"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAEA;;;IAGqBA,kB;;;;;;;;;;;;oDACCC,G,EAAKC,G;;;;;AACvBA,gBAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAArB;;;;;;;;;;;;;;;;;;;;;qDAGkBH,G,EAAKC,G;;;;;AACvBA,gBAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAArB;;;;;;;;;;;;;;;;;;;;;qDAGkBH,G,EAAKC,G;;;;;AACvBA,gBAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iBAArB;;;;;;;;;;;;;;;;AAGF;;;;;;;;;;;;qDAMiBH,G,EAAKC,G;;;;;;AACdG,gBAAAA,U,GAAaJ,GAAG,CAACK,MAAJ,CAAWD,U;;;uBAGLE,qBAAOC,QAAP,CAAgBC,QAAhB,WAA4BJ,UAA5B,E;;;AAAjBK,gBAAAA,Q;AAENR,gBAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,QAArB;;;;;;;AAEAR,gBAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBQ,IAAhB,CAAqB;AACnBC,kBAAAA,OAAO,YAAK,aAAMA,OAAX;AADY,iBAArB;;;;;;;;;;;;;;;;AAMJ;;;;;;;;;;;;qDAMoBX,G,EAAKC,G;;;;;;AACjBW,gBAAAA,O,GAAUZ,GAAG,CAACK,MAAJ,CAAWO,O;;;uBAGLN,qBAAOC,QAAP,CAAgBM,OAAhB,CAAwB;AAC1CC,kBAAAA,KAAK,EAAE;AACLC,oBAAAA,eAAe,EAAEH;AADZ,mBADmC;AAI1CI,kBAAAA,OAAO,EAAE,CAAC;AACRC,oBAAAA,KAAK,EAAEX,qBAAOY,MADN;AAERC,oBAAAA,EAAE,EAAE;AAFI,mBAAD;AAJiC,iBAAxB,C;;;AAAdC,gBAAAA,K;AAUNnB,gBAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBiB,KAArB;;;;;;;AAEAnB,gBAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBQ,kBAAAA,OAAO,YAAK,aAAMA,OAAX;AADY,iBAArB","sourcesContent":["import models from '../db-models';\r\n\r\n/**\r\n * Question CRUD operations controller\r\n */\r\nexport default class QuestionController {\r\n  static async create(req, res) {\r\n    res.status(501).json('not implemented');\r\n  }\r\n\r\n  static async update(req, res) {\r\n    res.status(501).json('not implemented');\r\n  }\r\n\r\n  static async delete(req, res) {\r\n    res.status(501).json('not implemented');\r\n  }\r\n\r\n  /**\r\n   * Get a specific Question by ID\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async get(req, res) {\r\n    const questionId = req.params.questionId;\r\n    \r\n    try {\r\n      const question = await models.Question.findByPk(`${questionId}`);\r\n\r\n      res.status(200).json(question);\r\n    } catch (error) {\r\n      res.status(400).send({\r\n        message: `${error.message}`,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all Questions and relevant Answers for a specific Questionnaire\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async getAll(req, res) {\r\n    const questId = req.params.questId;\r\n\r\n    try {\r\n      const items = await models.Question.findAll({\r\n        where: {\r\n          questionnaireId: questId\r\n        },\r\n        include: [{\r\n          model: models.Answer,\r\n          as: 'answers'\r\n        }]\r\n      });\r\n\r\n      res.status(200).json(items);\r\n    } catch (error) {\r\n      res.status(400).json({\r\n        message: `${error.message}`,\r\n      });\r\n    }\r\n\r\n  }\r\n}\r\n"],"file":"question.controller.js"}