{"version":3,"sources":["../../src/controllers/authorization.controller.js"],"names":["TOKEN_EXP_TIME","AuthorizationController","req","res","models","User","findOne","where","username","body","user","password","BC","compareSync","signUser","id","email","token","JWT","sign","config","secret","expiresIn","status","send","data","message"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAMA,cAAc,GAAG,KAAvB;AAEA;;;;IAGqBC,uB;;;;;;;;;;AACnB;;;;;;;;;oDAMkBC,G,EAAKC,G;;;;;;;;uBAEAC,qBAAOC,IAAP,CAAYC,OAAZ,CAAoB;AACrCC,kBAAAA,KAAK,EAAE;AACLC,oBAAAA,QAAQ,EAAEN,GAAG,CAACO,IAAJ,CAASD;AADd;AAD8B,iBAApB,C;;;AAAbE,gBAAAA,I;;AAMN,oBAAIA,IAAI,IAAIR,GAAG,CAACO,IAAJ,CAASE,QAAjB,IAA6BC,qBAAGC,WAAH,CAAeX,GAAG,CAACO,IAAJ,CAASE,QAAxB,EAAkCD,IAAI,CAACC,QAAvC,CAAjC,EAAmF;AAC3EG,kBAAAA,QAD2E,GAChE;AACfC,oBAAAA,EAAE,EAAEL,IAAI,CAACK,EADM;AAEfP,oBAAAA,QAAQ,EAAEE,IAAI,CAACF,QAFA;AAGfQ,oBAAAA,KAAK,EAAEN,IAAI,CAACM;AAHG,mBADgE;AAM3EC,kBAAAA,KAN2E,GAMnEC,yBAAIC,IAAJ,CAASL,QAAT,EAAmBM,mBAAOC,MAA1B,EAAkC;AAAEC,oBAAAA,SAAS,EAAEtB;AAAb,mBAAlC,CANmE;AAQjFG,kBAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,oBAAAA,IAAI,EAAE;AACJf,sBAAAA,IAAI,EAAEI;AADF,qBADa;AAInBG,oBAAAA,KAAK,EAAEA;AAJY,mBAArB;AAMD,iBAdD,MAcO;AACLd,kBAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBE,oBAAAA,OAAO,EAAE,gBADU;AAEnBD,oBAAAA,IAAI,EAAE;AAFa,mBAArB;AAID;;;;;;;;AAEDtB,gBAAAA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBE,kBAAAA,OAAO,mCAA4B,YAAMA,OAAlC,CADY;AAEnBD,kBAAAA,IAAI,EAAE;AAFa,iBAArB","sourcesContent":["import BC from 'bcryptjs';\r\nimport JWT from 'jsonwebtoken';\r\nimport models from '../db-models';\r\nimport config from '../config';\r\n\r\nconst TOKEN_EXP_TIME = 86400;\r\n\r\n/**\r\n * Auth CRUD operations controller\r\n */\r\nexport default class AuthorizationController {\r\n  /**\r\n   * Issue JWT to the existing user\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async auth(req, res) {\r\n    try {\r\n      const user = await models.User.findOne({\r\n        where: {\r\n          username: req.body.username\r\n        }\r\n      });\r\n\r\n      if (user && req.body.password && BC.compareSync(req.body.password, user.password)) {\r\n        const signUser = {\r\n          id: user.id,\r\n          username: user.username,\r\n          email: user.email\r\n        };\r\n        const token = JWT.sign(signUser, config.secret, { expiresIn: TOKEN_EXP_TIME });\r\n  \r\n        res.status(200).send({\r\n          data: {\r\n            user: signUser\r\n          },\r\n          token: token\r\n        });\r\n      } else {\r\n        res.status(404).send({\r\n          message: 'User Not Found',\r\n          data: null\r\n        });\r\n      }\r\n    } catch (error) {\r\n      res.status(404).send({\r\n        message: `An error has occurred: ${error.message}`,\r\n        data: null\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"file":"authorization.controller.js"}