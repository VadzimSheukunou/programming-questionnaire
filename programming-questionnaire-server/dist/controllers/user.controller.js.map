{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["UserController","req","res","models","User","create","body","password","BC","hashSync","genSaltSync","user","status","json","message","userId","params","findByPk","update","username","email","destroy","where","id"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAEA;;;IAGqBA,c;;;;;;;;;;AACnB;;;;;;;;;oDAMoBC,G,EAAKC,G;;;;;;;;uBAEFC,qBAAOC,IAAP,CAChBC,MADgB,mBAEZJ,GAAG,CAACK,IAFQ;AAGfC,kBAAAA,QAAQ,EAAEC,qBAAGC,QAAH,CAAYR,GAAG,CAACK,IAAJ,CAASC,QAArB,EAA+BC,qBAAGE,WAAH,CAAe,EAAf,CAA/B;AAHK,mB;;;AAAbC,gBAAAA,I;AAMNT,gBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,IAArB;;;;;;;AAEAT,gBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,YAAMC,OAA3B;;;;;;;;;;;;;;;;AAIJ;;;;;;;;;;;;qDAMoBb,G,EAAKC,G;;;;;;AACjBa,gBAAAA,M,GAASd,GAAG,CAACe,MAAJ,CAAWD,M;;;uBAGLZ,qBAAOC,IAAP,CAAYa,QAAZ,WAAwBF,MAAxB,E;;;AAAbJ,gBAAAA,I;;oBAEDA,I;;;;;AACHT,gBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,kBAAAA,OAAO,EAAE;AADU,iBAArB;;;;;;uBAIMH,IAAI,CACPO,MADG,CACI;AACNC,kBAAAA,QAAQ,EAAElB,GAAG,CAACK,IAAJ,CAASa,QAAT,IAAqBR,IAAI,CAACQ,QAD9B;AAENC,kBAAAA,KAAK,EAAEnB,GAAG,CAACK,IAAJ,CAASc,KAAT,IAAkBT,IAAI,CAACS,KAFxB;AAGNb,kBAAAA,QAAQ,EAAEN,GAAG,CAACK,IAAJ,CAASC,QAAT,GAAoBC,qBAAGC,QAAH,CAAYR,GAAG,CAACK,IAAJ,CAASC,QAArB,EAA+BC,qBAAGE,WAAH,CAAe,EAAf,CAA/B,CAApB,GAAyEC,IAAI,CAACJ;AAHlF,iBADJ,C;;;AAONL,gBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;;;AAGFX,gBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,aAAMC,OAA3B;;;;;;;;;;;;;;;;AAIJ;;;;;;;;;;;;qDAMoBb,G,EAAKC,G;;;;;;AACjBa,gBAAAA,M,GAASd,GAAG,CAACe,MAAJ,CAAWD,M;;;uBAGlBZ,qBAAOC,IAAP,CACHiB,OADG,CACK;AACPC,kBAAAA,KAAK,EAAE;AACLC,oBAAAA,EAAE,EAAER;AADC;AADA,iBADL,C;;;AAONb,gBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;;;;;;AAEAX,gBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,aAAMC,OAA3B;;;;;;;;;;;;;;;;AAIJ;;;;;;;;;;;;qDAMiBb,G,EAAKC,G;;;;;;AACda,gBAAAA,M,GAASd,GAAG,CAACe,MAAJ,CAAWD,M;;;uBAGLZ,qBAAOC,IAAP,CAAYa,QAAZ,WAAwBF,MAAxB,E;;;AAAbJ,gBAAAA,I;;AAEN,oBAAIA,IAAJ,EAAU;AACRT,kBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,IAArB;AACD,iBAFD,MAEO;AACLT,kBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,oBAAAA,OAAO,EAAE;AADU,mBAArB;AAGD;;;;;;;;AAEDZ,gBAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,WAAwB,aAAMC,OAA9B","sourcesContent":["import models from '../db-models';\r\nimport BC from 'bcryptjs';\r\n\r\n/**\r\n * User CRUD operations controller\r\n */\r\nexport default class UserController {\r\n  /**\r\n   * Crete User record\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async create(req, res) {\r\n    try {\r\n      const user = await models.User\r\n        .create({\r\n          ...req.body,\r\n          password: BC.hashSync(req.body.password, BC.genSaltSync(10))\r\n        });\r\n\r\n      res.status(201).json(user);\r\n    } catch (error) {\r\n      res.status(400).json(error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update User record\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async update(req, res) {\r\n    const userId = req.params.userId;\r\n\r\n    try {\r\n      const user = await models.User.findByPk(`${userId}`);\r\n\r\n      if (!user) {\r\n        res.status(404).json({\r\n          message: 'User Not Found',\r\n        });\r\n      } else {\r\n        await user\r\n          .update({\r\n            username: req.body.username || user.username,\r\n            email: req.body.email || user.email,\r\n            password: req.body.password ? BC.hashSync(req.body.password, BC.genSaltSync(10)) : user.password,\r\n          });\r\n\r\n        res.status(200).json();\r\n      }\r\n    } catch (error) {\r\n      res.status(400).json(error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete User record\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async delete(req, res) {\r\n    const userId = req.params.userId;\r\n\r\n    try {\r\n      await models.User\r\n        .destroy({\r\n          where: {\r\n            id: userId\r\n          }\r\n        });\r\n\r\n      res.status(204).json();\r\n    } catch (error) {\r\n      res.status(400).json(error.message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get specific User by ID\r\n   * \r\n   * @param {Object} req \r\n   * @param {Object} res \r\n   */\r\n  static async get(req, res) {\r\n    const userId = req.params.userId;\r\n\r\n    try {\r\n      const user = await models.User.findByPk(`${userId}`);\r\n\r\n      if (user) {\r\n        res.status(200).json(user);\r\n      } else {\r\n        res.status(404).json({\r\n          message: 'User Not Found',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      res.status(400).json(`${error.message}`);\r\n    }\r\n  }\r\n}\r\n"],"file":"user.controller.js"}